## Valgrind suppression file
## Add false positives and third party's bugs to here.
## valgrind --leak-check=full --show-leak-kinds=all --suppressions=<path_to_valgrind.supp> --gen-suppressions=all ./<your_program>
## Put <Reporter> <Date> <Environment> <Some comment> for each of them

# Hideaki, 2014 Apr, Fedora 19, libunwind's bug.
{
   libunwind_bug1
   Memcheck:Param
   msync(start)
   fun:__msync_nocancel
   obj:/usr/lib64/libunwind.so.*
   obj:/usr/lib64/libunwind.so.*
   obj:/usr/lib64/libunwind.so.*
   obj:/usr/lib64/libunwind.so.*
   fun:_ULx86_64_step
   fun:_Z13GetStackTracePPvii
   fun:_ZN8tcmalloc8PageHeap8GrowHeapEm
   fun:_ZN8tcmalloc8PageHeap3NewEm
   fun:_ZN8tcmalloc15CentralFreeList8PopulateEv
   fun:_ZN8tcmalloc15CentralFreeList18FetchFromSpansSafeEv
   fun:_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i
}
{
   libunwind_bug2
   Memcheck:Param
   msync(start)
   obj:/usr/lib64/libpthread-*
   obj:/usr/lib64/libunwind.so*
   obj:/usr/lib64/libunwind.so*
   obj:/usr/lib64/libunwind.so*
   obj:/usr/lib64/libunwind.so*
   fun:_ULx86_64_step
   fun:_Z13GetStackTracePPvii
   fun:_ZN8tcmalloc8PageHeap8GrowHeapEm
   fun:_ZN8tcmalloc8PageHeap3NewEm
   fun:_ZN8tcmalloc15CentralFreeList8PopulateEv
   fun:_ZN8tcmalloc15CentralFreeList18FetchFromSpansSafeEv
   fun:_ZN8tcmalloc15CentralFreeList11RemoveRangeEPPvS2_i
}

# Hideaki, 2014 Apr, Fedora 20, libprofiler's bug.
{
   libprofiler_bug1
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:_Znwm
   fun:_ZN14ProfileHandler4InitEv
   fun:pthread_once
   fun:_ZN14ProfileHandler8InstanceEv
   fun:ProfileHandlerRegisterThread
   obj:/usr/lib64/libprofiler.so*
}

# Hideaki, 2014 Apr, Fedora 20,
# http://comments.gmane.org/gmane.linux.kernel.numa/814
# According to this, these are by design, not a bug of libnuma.
{
   numa_run_on_node_global1
   Memcheck:Leak
   match-leak-kinds: reachable
   ...
   fun:numa_run_on_node
}


# Hideaki, 2014 May, Fedora 20.
# Observed "Invalid read of size 4" from std::promise. Someone else has observed the same
# https://www.mail-archive.com/gcc-bugs@gcc.gnu.org/msg420101.html
# So, I guess this is libstdc++'s bug.. but not 100% sure yet.
#{
#   std_set_once_bug
#   Memcheck:Addr4
#   fun:pthread_once
#   fun:_ZL14__gthread_oncePiPFvvE
#   fun:_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_
#    ...
# }
# May 14. Ummm, this seems a real bug in libstdc, rather than a false positive (sorry, valgrind).
# This std::promise issue is causing a crash.
#   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60966
# Maybe I should avoid reuse of std::promise to work it around.


# Hideaki, 2014 May, Fedora 20.
# Most likely this is a bug in GLOG's SetVLOGLevel. Seems like it leaks one std::string.
# It's not a big issue, probably intentional as it's one-time allocation.
{
   glog_setvloglevel_leak1
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:_Znwm
   fun:_ZN6google12SetVLOGLevelEPKci
   ...
}
{
   glog_setvloglevel_leak2
   Memcheck:Leak
   match-leak-kinds: possible
   fun:_Znwm
   fun:_ZNSs4_Rep9_S_createEmmRKSaIcE
   fun:_ZNSs9_M_mutateEmmm
   fun:_ZNSs15_M_replace_safeEmmPKcm
   fun:_ZN6google12SetVLOGLevelEPKci
}
